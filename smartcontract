package chaincode

import (
	"encoding/json"
	"fmt"

	"github.com/hyperledger/fabric-contract-api-go/contractapi"
)

// SmartContract provides functions for managing an Asset
type SmartContract struct {
	contractapi.Contract
}

// Asset describes basic details of what makes up a simple asset
//Insert struct field in alphabetic order => to achieve determinism across languages
// golang keeps the order when marshal to json but doesn't order automatically
type Library struct {
	ID       string `json:"ID"`
	Owner    string `json:"Owner"`
	Quantity int    `json:"Quantity"`
}

// InitLedger adds a base set of assets to the ledger
func (s *SmartContract) InitLedger(ctx contractapi.TransactionContextInterface) error {
	librarys := []Library{
		{ID: "book1", Quantity: 5, Owner: "Tomoko"},
		{ID: "book2", Quantity: 5, Owner: "Brad"},
		{ID: "book3", Quantity: 10, Owner: "Jin Soo"},
		{ID: "book4", Quantity: 10, Owner: "Max"},
		{ID: "book5", Quantity: 15, Owner: "Adriana"},
		{ID: "book6", Quantity: 15, Owner: "Michel"},
	}

	for _, library := range librarys {
		libraryJSON, err := json.Marshal(library)
		if err != nil {
			return err
		}

		err = ctx.GetStub().PutState(library.ID, libraryJSON)
		if err != nil {
			return fmt.Errorf("failed to put to world state. %v", err)
		}
	}

	return nil
}

// CreateAsset issues a new asset to the world state with given details.
func (s *SmartContract) CreateLibrary(ctx contractapi.TransactionContextInterface, id string,  quantity int, owner string) error {
	exists, err := s.LibraryExists(ctx, id)
	if err != nil {
		return err
	}
	if exists {
		return fmt.Errorf("the library %s already exists", id)
	}

	library := Library{
		ID:       id,
		Quantity: quantity,
		Owner:    owner,
	}
	libraryJSON, err := json.Marshal(library)
	if err != nil {
		return err
	}

	return ctx.GetStub().PutState(id, libraryJSON)
}

// ReadAsset returns the asset stored in the world state with given id.
func (s *SmartContract) ReadAsset(ctx contractapi.TransactionContextInterface, id string) (*Library, error) {
	libraryJSON, err := ctx.GetStub().GetState(id)
	if err != nil {
		return nil, fmt.Errorf("failed to read from world state: %v", err)
	}
	if libraryJSON == nil {
		return nil, fmt.Errorf("the asset %s does not exist", id)
	}

	var library Library
	err = json.Unmarshal(libraryJSON, &library)
	if err != nil {
		return nil, err
	}

	return &library, nil
}

// UpdateAsset updates an existing asset in the world state with provided parameters.
func (s *SmartContract) UpdateAsset(ctx contractapi.TransactionContextInterface, id string,  quantity int, owner string) error {
	exists, err := s.LibraryExists(ctx, id)
	if err != nil {
		return err
	}
	if !exists {
		return fmt.Errorf("the library %s does not exist", id)
	}

	// overwriting original asset with new asset
	library := Library{
		ID:       id,
		Quantity: quantity,
		Owner:    owner,
	}
	libraryJSON, err := json.Marshal(library)
	if err != nil {
		return err
	}

	return ctx.GetStub().PutState(id, libraryJSON)
}

// DeleteAsset deletes an given asset from the world state.
func (s *SmartContract) DeleteAsset(ctx contractapi.TransactionContextInterface, id string) error {
	exists, err := s.LibraryExists(ctx, id)
	if err != nil {
		return err
	}
	if !exists {
		return fmt.Errorf("the asset %s does not exist", id)
	}

	return ctx.GetStub().DelState(id)
}

// AssetExists returns true when asset with given ID exists in world state
func (s *SmartContract) LibraryExists(ctx contractapi.TransactionContextInterface, id string) (bool, error) {
	assetJSON, err := ctx.GetStub().GetState(id)
	if err != nil {
		return false, fmt.Errorf("failed to read from world state: %v", err)
	}

	return assetJSON != nil, nil
}

// TransferAsset updates the owner field of asset with given id in world state, and returns the old owner.
func (s *SmartContract) TransferAsset(ctx contractapi.TransactionContextInterface, id string, newOwner string) (string, error) {
	asset, err := s.ReadAsset(ctx, id)
	if err != nil {
		return "", err
	}

	oldOwner := asset.Owner
	asset.Owner = newOwner

	assetJSON, err := json.Marshal(asset)
	if err != nil {
		return "", err
	}

	err = ctx.GetStub().PutState(id, assetJSON)
	if err != nil {
		return "", err
	}

	return oldOwner, nil
}

// GetAllAssets returns all assets found in world state
func (s *SmartContract) GetAllAssets(ctx contractapi.TransactionContextInterface) ([]*Library, error) {
	// range query with empty string for startKey and endKey does an
	// open-ended query of all assets in the chaincode namespace.
	resultsIterator, err := ctx.GetStub().GetStateByRange("", "")
	if err != nil {
		return nil, err
	}
	defer resultsIterator.Close()

	var librarys []*Library
	for resultsIterator.HasNext() {
		queryResponse, err := resultsIterator.Next()
		if err != nil {
			return nil, err
		}

		var library Library
		err = json.Unmarshal(queryResponse.Value, &library)
		if err != nil {
			return nil, err
		}
		librarys = append(librarys, &library)
	}

	return librarys, nil
}
